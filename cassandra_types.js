//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
ConsistencyLevel = { 
'ZERO' : 0
,'ONE' : 1
,'QUORUM' : 2
,'DCQUORUM' : 3
,'DCQUORUMSYNC' : 4
,'ALL' : 5
,'ANY' : 6
}
AccessLevel = { 
'NONE' : 0
,'READONLY' : 16
,'READWRITE' : 32
,'FULL' : 64
}
VERSION = '7.0.0'
Clock = function(args){
this.timestamp = 0
if( args != null ){if (null != args.timestamp)
this.timestamp = args.timestamp
}}
Clock.prototype = {}
Clock.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
  var ret = input.readFieldBegin()
  var fname = ret.fname
  var ftype = ret.ftype
  var fid   = ret.fid
  if (ftype == Thrift.Type.STOP) 
    break
  switch(fid)
  {
    case 1:    if (ftype == Thrift.Type.I64) {
      var rtmp = input.readI64()
this.timestamp = rtmp.value
    } else {
      input.skip(ftype)
    }
    break
    default:
      input.skip(ftype)
  }
  input.readFieldEnd()
}
input.readStructEnd()
return
}

Clock.prototype.write = function(output){ 
output.writeStructBegin('Clock')
if (null != this.timestamp) {
  output.writeFieldBegin('timestamp', Thrift.Type.I64, 1)
  output.writeI64(this.timestamp)
  output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

Column = function(args){
this.name = ''
this.value = ''
this.clock = new Clock()
this.ttl = 0
if( args != null ){if (null != args.name)
this.name = args.name
if (null != args.value)
this.value = args.value
if (null != args.clock)
this.clock = args.clock
if (null != args.ttl)
this.ttl = args.ttl
}}
Column.prototype = {}
Column.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
  break
switch(fid)
{
  case 1:  if (ftype == Thrift.Type.STRING) {
    var rtmp = input.readString()
this.name = rtmp.value
  } else {
    input.skip(ftype)
  }
  break
  case 2:  if (ftype == Thrift.Type.STRING) {
    var rtmp = input.readString()
this.value = rtmp.value
  } else {
    input.skip(ftype)
  }
  break
  case 3:  if (ftype == Thrift.Type.STRUCT) {
    this.clock = new Clock()
    this.clock.read(input)
  } else {
    input.skip(ftype)
  }
  break
  case 4:  if (ftype == Thrift.Type.I32) {
    var rtmp = input.readI32()
this.ttl = rtmp.value
  } else {
    input.skip(ftype)
  }
  break
  default:
    input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

Column.prototype.write = function(output){ 
output.writeStructBegin('Column')
if (null != this.name) {
output.writeFieldBegin('name', Thrift.Type.STRING, 1)
output.writeString(this.name)
output.writeFieldEnd()
}
if (null != this.value) {
output.writeFieldBegin('value', Thrift.Type.STRING, 2)
output.writeString(this.value)
output.writeFieldEnd()
}
if (null != this.clock) {
output.writeFieldBegin('clock', Thrift.Type.STRUCT, 3)
this.clock.write(output)
output.writeFieldEnd()
}
if (null != this.ttl) {
output.writeFieldBegin('ttl', Thrift.Type.I32, 4)
output.writeI32(this.ttl)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

SuperColumn = function(args){
this.name = ''
this.columns = []
if( args != null ){if (null != args.name)
this.name = args.name
if (null != args.columns)
this.columns = args.columns
}}
SuperColumn.prototype = {}
SuperColumn.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
  var rtmp = input.readString()
this.name = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.LIST) {
  {
    var _size0 = 0
    var rtmp3
    this.columns = []
    var _etype3 = 0
    rtmp3 = input.readListBegin()
    _etype3 = rtmp3.etype
    _size0 = rtmp3.size
    for (var _i4 = 0; _i4 < _size0; ++_i4)
    {
      var elem5 = null
      elem5 = new Column()
      elem5.read(input)
      this.columns.push(elem5)
    }
    input.readListEnd()
  }
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

SuperColumn.prototype.write = function(output){ 
output.writeStructBegin('SuperColumn')
if (null != this.name) {
output.writeFieldBegin('name', Thrift.Type.STRING, 1)
output.writeString(this.name)
output.writeFieldEnd()
}
if (null != this.columns) {
output.writeFieldBegin('columns', Thrift.Type.LIST, 2)
{
output.writeListBegin(Thrift.Type.STRUCT, this.columns.length)
{
  for(var iter6 in this.columns)
  {
    iter6=this.columns[iter6]
    iter6.write(output)
  }
}
output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

ColumnOrSuperColumn = function(args){
this.column = new Column()
this.super_column = new SuperColumn()
if( args != null ){if (null != args.column)
this.column = args.column
if (null != args.super_column)
this.super_column = args.super_column
}}
ColumnOrSuperColumn.prototype = {}
ColumnOrSuperColumn.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRUCT) {
this.column = new Column()
this.column.read(input)
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRUCT) {
this.super_column = new SuperColumn()
this.super_column.read(input)
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

ColumnOrSuperColumn.prototype.write = function(output){ 
output.writeStructBegin('ColumnOrSuperColumn')
if (null != this.column) {
output.writeFieldBegin('column', Thrift.Type.STRUCT, 1)
this.column.write(output)
output.writeFieldEnd()
}
if (null != this.super_column) {
output.writeFieldBegin('super_column', Thrift.Type.STRUCT, 2)
this.super_column.write(output)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

NotFoundException = function(args){
}
for (var property in Thrift.Exception)
NotFoundException[property] = Thrift.Exception[property]
NotFoundException.prototype = {}
NotFoundException.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

NotFoundException.prototype.write = function(output){ 
output.writeStructBegin('NotFoundException')
output.writeFieldStop()
output.writeStructEnd()
return
}

InvalidRequestException = function(args){
this.why = ''
if( args != null ){if (null != args.why)
this.why = args.why
}}
for (var property in Thrift.Exception)
InvalidRequestException[property] = Thrift.Exception[property]
InvalidRequestException.prototype = {}
InvalidRequestException.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.why = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

InvalidRequestException.prototype.write = function(output){ 
output.writeStructBegin('InvalidRequestException')
if (null != this.why) {
output.writeFieldBegin('why', Thrift.Type.STRING, 1)
output.writeString(this.why)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

UnavailableException = function(args){
}
for (var property in Thrift.Exception)
UnavailableException[property] = Thrift.Exception[property]
UnavailableException.prototype = {}
UnavailableException.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

UnavailableException.prototype.write = function(output){ 
output.writeStructBegin('UnavailableException')
output.writeFieldStop()
output.writeStructEnd()
return
}

TimedOutException = function(args){
}
for (var property in Thrift.Exception)
TimedOutException[property] = Thrift.Exception[property]
TimedOutException.prototype = {}
TimedOutException.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

TimedOutException.prototype.write = function(output){ 
output.writeStructBegin('TimedOutException')
output.writeFieldStop()
output.writeStructEnd()
return
}

AuthenticationException = function(args){
this.why = ''
if( args != null ){if (null != args.why)
this.why = args.why
}}
for (var property in Thrift.Exception)
AuthenticationException[property] = Thrift.Exception[property]
AuthenticationException.prototype = {}
AuthenticationException.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.why = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

AuthenticationException.prototype.write = function(output){ 
output.writeStructBegin('AuthenticationException')
if (null != this.why) {
output.writeFieldBegin('why', Thrift.Type.STRING, 1)
output.writeString(this.why)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

AuthorizationException = function(args){
this.why = ''
if( args != null ){if (null != args.why)
this.why = args.why
}}
for (var property in Thrift.Exception)
AuthorizationException[property] = Thrift.Exception[property]
AuthorizationException.prototype = {}
AuthorizationException.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.why = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

AuthorizationException.prototype.write = function(output){ 
output.writeStructBegin('AuthorizationException')
if (null != this.why) {
output.writeFieldBegin('why', Thrift.Type.STRING, 1)
output.writeString(this.why)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

ColumnParent = function(args){
this.column_family = ''
this.super_column = ''
if( args != null ){if (null != args.column_family)
this.column_family = args.column_family
if (null != args.super_column)
this.super_column = args.super_column
}}
ColumnParent.prototype = {}
ColumnParent.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 3:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.column_family = rtmp.value
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.super_column = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

ColumnParent.prototype.write = function(output){ 
output.writeStructBegin('ColumnParent')
if (null != this.column_family) {
output.writeFieldBegin('column_family', Thrift.Type.STRING, 3)
output.writeString(this.column_family)
output.writeFieldEnd()
}
if (null != this.super_column) {
output.writeFieldBegin('super_column', Thrift.Type.STRING, 4)
output.writeString(this.super_column)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

ColumnPath = function(args){
this.column_family = ''
this.super_column = ''
this.column = ''
if( args != null ){if (null != args.column_family)
this.column_family = args.column_family
if (null != args.super_column)
this.super_column = args.super_column
if (null != args.column)
this.column = args.column
}}
ColumnPath.prototype = {}
ColumnPath.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 3:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.column_family = rtmp.value
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.super_column = rtmp.value
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.column = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

ColumnPath.prototype.write = function(output){ 
output.writeStructBegin('ColumnPath')
if (null != this.column_family) {
output.writeFieldBegin('column_family', Thrift.Type.STRING, 3)
output.writeString(this.column_family)
output.writeFieldEnd()
}
if (null != this.super_column) {
output.writeFieldBegin('super_column', Thrift.Type.STRING, 4)
output.writeString(this.super_column)
output.writeFieldEnd()
}
if (null != this.column) {
output.writeFieldBegin('column', Thrift.Type.STRING, 5)
output.writeString(this.column)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

SliceRange = function(args){
this.start = ''
this.finish = ''
this.reversed = false
this.count = 100
this.bitmasks = []
if( args != null ){if (null != args.start)
this.start = args.start
if (null != args.finish)
this.finish = args.finish
if (null != args.reversed)
this.reversed = args.reversed
if (null != args.count)
this.count = args.count
if (null != args.bitmasks)
this.bitmasks = args.bitmasks
}}
SliceRange.prototype = {}
SliceRange.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.start = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.finish = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.BOOL) {
var rtmp = input.readBool()
this.reversed = rtmp.value
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.count = rtmp.value
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.LIST) {
{
var _size7 = 0
var rtmp3
this.bitmasks = []
var _etype10 = 0
rtmp3 = input.readListBegin()
_etype10 = rtmp3.etype
_size7 = rtmp3.size
for (var _i11 = 0; _i11 < _size7; ++_i11)
{
var elem12 = null
var rtmp = input.readString()
elem12 = rtmp.value
this.bitmasks.push(elem12)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

SliceRange.prototype.write = function(output){ 
output.writeStructBegin('SliceRange')
if (null != this.start) {
output.writeFieldBegin('start', Thrift.Type.STRING, 1)
output.writeString(this.start)
output.writeFieldEnd()
}
if (null != this.finish) {
output.writeFieldBegin('finish', Thrift.Type.STRING, 2)
output.writeString(this.finish)
output.writeFieldEnd()
}
if (null != this.reversed) {
output.writeFieldBegin('reversed', Thrift.Type.BOOL, 3)
output.writeBool(this.reversed)
output.writeFieldEnd()
}
if (null != this.count) {
output.writeFieldBegin('count', Thrift.Type.I32, 4)
output.writeI32(this.count)
output.writeFieldEnd()
}
if (null != this.bitmasks) {
output.writeFieldBegin('bitmasks', Thrift.Type.LIST, 5)
{
output.writeListBegin(Thrift.Type.STRING, this.bitmasks.length)
{
for(var iter13 in this.bitmasks)
{
iter13=this.bitmasks[iter13]
output.writeString(iter13)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

SlicePredicate = function(args){
this.column_names = []
this.slice_range = new SliceRange()
if( args != null ){if (null != args.column_names)
this.column_names = args.column_names
if (null != args.slice_range)
this.slice_range = args.slice_range
}}
SlicePredicate.prototype = {}
SlicePredicate.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.LIST) {
{
var _size14 = 0
var rtmp3
this.column_names = []
var _etype17 = 0
rtmp3 = input.readListBegin()
_etype17 = rtmp3.etype
_size14 = rtmp3.size
for (var _i18 = 0; _i18 < _size14; ++_i18)
{
var elem19 = null
var rtmp = input.readString()
elem19 = rtmp.value
this.column_names.push(elem19)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRUCT) {
this.slice_range = new SliceRange()
this.slice_range.read(input)
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

SlicePredicate.prototype.write = function(output){ 
output.writeStructBegin('SlicePredicate')
if (null != this.column_names) {
output.writeFieldBegin('column_names', Thrift.Type.LIST, 1)
{
output.writeListBegin(Thrift.Type.STRING, this.column_names.length)
{
for(var iter20 in this.column_names)
{
iter20=this.column_names[iter20]
output.writeString(iter20)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.slice_range) {
output.writeFieldBegin('slice_range', Thrift.Type.STRUCT, 2)
this.slice_range.write(output)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

KeyRange = function(args){
this.start_key = ''
this.end_key = ''
this.start_token = ''
this.end_token = ''
this.count = 100
if( args != null ){if (null != args.start_key)
this.start_key = args.start_key
if (null != args.end_key)
this.end_key = args.end_key
if (null != args.start_token)
this.start_token = args.start_token
if (null != args.end_token)
this.end_token = args.end_token
if (null != args.count)
this.count = args.count
}}
KeyRange.prototype = {}
KeyRange.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.start_key = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.end_key = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.start_token = rtmp.value
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.end_token = rtmp.value
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.count = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

KeyRange.prototype.write = function(output){ 
output.writeStructBegin('KeyRange')
if (null != this.start_key) {
output.writeFieldBegin('start_key', Thrift.Type.STRING, 1)
output.writeString(this.start_key)
output.writeFieldEnd()
}
if (null != this.end_key) {
output.writeFieldBegin('end_key', Thrift.Type.STRING, 2)
output.writeString(this.end_key)
output.writeFieldEnd()
}
if (null != this.start_token) {
output.writeFieldBegin('start_token', Thrift.Type.STRING, 3)
output.writeString(this.start_token)
output.writeFieldEnd()
}
if (null != this.end_token) {
output.writeFieldBegin('end_token', Thrift.Type.STRING, 4)
output.writeString(this.end_token)
output.writeFieldEnd()
}
if (null != this.count) {
output.writeFieldBegin('count', Thrift.Type.I32, 5)
output.writeI32(this.count)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

KeySlice = function(args){
this.key = ''
this.columns = []
if( args != null ){if (null != args.key)
this.key = args.key
if (null != args.columns)
this.columns = args.columns
}}
KeySlice.prototype = {}
KeySlice.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.key = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.LIST) {
{
var _size21 = 0
var rtmp3
this.columns = []
var _etype24 = 0
rtmp3 = input.readListBegin()
_etype24 = rtmp3.etype
_size21 = rtmp3.size
for (var _i25 = 0; _i25 < _size21; ++_i25)
{
var elem26 = null
elem26 = new ColumnOrSuperColumn()
elem26.read(input)
this.columns.push(elem26)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

KeySlice.prototype.write = function(output){ 
output.writeStructBegin('KeySlice')
if (null != this.key) {
output.writeFieldBegin('key', Thrift.Type.STRING, 1)
output.writeString(this.key)
output.writeFieldEnd()
}
if (null != this.columns) {
output.writeFieldBegin('columns', Thrift.Type.LIST, 2)
{
output.writeListBegin(Thrift.Type.STRUCT, this.columns.length)
{
for(var iter27 in this.columns)
{
iter27=this.columns[iter27]
iter27.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

Deletion = function(args){
this.clock = new Clock()
this.super_column = ''
this.predicate = new SlicePredicate()
if( args != null ){if (null != args.clock)
this.clock = args.clock
if (null != args.super_column)
this.super_column = args.super_column
if (null != args.predicate)
this.predicate = args.predicate
}}
Deletion.prototype = {}
Deletion.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRUCT) {
this.clock = new Clock()
this.clock.read(input)
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.super_column = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.STRUCT) {
this.predicate = new SlicePredicate()
this.predicate.read(input)
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

Deletion.prototype.write = function(output){ 
output.writeStructBegin('Deletion')
if (null != this.clock) {
output.writeFieldBegin('clock', Thrift.Type.STRUCT, 1)
this.clock.write(output)
output.writeFieldEnd()
}
if (null != this.super_column) {
output.writeFieldBegin('super_column', Thrift.Type.STRING, 2)
output.writeString(this.super_column)
output.writeFieldEnd()
}
if (null != this.predicate) {
output.writeFieldBegin('predicate', Thrift.Type.STRUCT, 3)
this.predicate.write(output)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

Mutation = function(args){
this.column_or_supercolumn = new ColumnOrSuperColumn()
this.deletion = new Deletion()
if( args != null ){if (null != args.column_or_supercolumn)
this.column_or_supercolumn = args.column_or_supercolumn
if (null != args.deletion)
this.deletion = args.deletion
}}
Mutation.prototype = {}
Mutation.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRUCT) {
this.column_or_supercolumn = new ColumnOrSuperColumn()
this.column_or_supercolumn.read(input)
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRUCT) {
this.deletion = new Deletion()
this.deletion.read(input)
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

Mutation.prototype.write = function(output){ 
output.writeStructBegin('Mutation')
if (null != this.column_or_supercolumn) {
output.writeFieldBegin('column_or_supercolumn', Thrift.Type.STRUCT, 1)
this.column_or_supercolumn.write(output)
output.writeFieldEnd()
}
if (null != this.deletion) {
output.writeFieldBegin('deletion', Thrift.Type.STRUCT, 2)
this.deletion.write(output)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

TokenRange = function(args){
this.start_token = ''
this.end_token = ''
this.endpoints = []
if( args != null ){if (null != args.start_token)
this.start_token = args.start_token
if (null != args.end_token)
this.end_token = args.end_token
if (null != args.endpoints)
this.endpoints = args.endpoints
}}
TokenRange.prototype = {}
TokenRange.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.start_token = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.end_token = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.LIST) {
{
var _size28 = 0
var rtmp3
this.endpoints = []
var _etype31 = 0
rtmp3 = input.readListBegin()
_etype31 = rtmp3.etype
_size28 = rtmp3.size
for (var _i32 = 0; _i32 < _size28; ++_i32)
{
var elem33 = null
var rtmp = input.readString()
elem33 = rtmp.value
this.endpoints.push(elem33)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

TokenRange.prototype.write = function(output){ 
output.writeStructBegin('TokenRange')
if (null != this.start_token) {
output.writeFieldBegin('start_token', Thrift.Type.STRING, 1)
output.writeString(this.start_token)
output.writeFieldEnd()
}
if (null != this.end_token) {
output.writeFieldBegin('end_token', Thrift.Type.STRING, 2)
output.writeString(this.end_token)
output.writeFieldEnd()
}
if (null != this.endpoints) {
output.writeFieldBegin('endpoints', Thrift.Type.LIST, 3)
{
output.writeListBegin(Thrift.Type.STRING, this.endpoints.length)
{
for(var iter34 in this.endpoints)
{
iter34=this.endpoints[iter34]
output.writeString(iter34)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

AuthenticationRequest = function(args){
this.credentials = {}
if( args != null ){if (null != args.credentials)
this.credentials = args.credentials
}}
AuthenticationRequest.prototype = {}
AuthenticationRequest.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.MAP) {
{
var _size35 = 0
var rtmp3
this.credentials = {}
var _ktype36 = 0
var _vtype37 = 0
rtmp3 = input.readMapBegin()
_ktype36= rtmp3.ktype
_vtype37= rtmp3.vtype
_size35= rtmp3.size
for (var _i39 = 0; _i39 < _size35; ++_i39)
{
key40 = ''
val41 = ''
var rtmp = input.readString()
key40 = rtmp.value
var rtmp = input.readString()
val41 = rtmp.value
this.credentials[key40] = val41
}
input.readMapEnd()
}
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

AuthenticationRequest.prototype.write = function(output){ 
output.writeStructBegin('AuthenticationRequest')
if (null != this.credentials) {
output.writeFieldBegin('credentials', Thrift.Type.MAP, 1)
{
output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, this.credentials.length)
{
for(var kiter42 in this.credentials){
var viter43 = this.credentials[kiter42]
output.writeString(kiter42)
output.writeString(viter43)
}
}
output.writeMapEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

CfDef = function(args){
this.table = ''
this.name = ''
this.column_type = 'Standard'
this.clock_type = 'Timestamp'
this.comparator_type = 'BytesType'
this.subcomparator_type = ''
this.reconciler = ''
this.comment = ''
this.row_cache_size = 0
this.preload_row_cache = false
this.key_cache_size = 200000
if( args != null ){if (null != args.table)
this.table = args.table
if (null != args.name)
this.name = args.name
if (null != args.column_type)
this.column_type = args.column_type
if (null != args.clock_type)
this.clock_type = args.clock_type
if (null != args.comparator_type)
this.comparator_type = args.comparator_type
if (null != args.subcomparator_type)
this.subcomparator_type = args.subcomparator_type
if (null != args.reconciler)
this.reconciler = args.reconciler
if (null != args.comment)
this.comment = args.comment
if (null != args.row_cache_size)
this.row_cache_size = args.row_cache_size
if (null != args.preload_row_cache)
this.preload_row_cache = args.preload_row_cache
if (null != args.key_cache_size)
this.key_cache_size = args.key_cache_size
}}
CfDef.prototype = {}
CfDef.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.table = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.name = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.column_type = rtmp.value
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.clock_type = rtmp.value
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.comparator_type = rtmp.value
} else {
  input.skip(ftype)
}
break
case 6:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.subcomparator_type = rtmp.value
} else {
  input.skip(ftype)
}
break
case 7:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.reconciler = rtmp.value
} else {
  input.skip(ftype)
}
break
case 8:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.comment = rtmp.value
} else {
  input.skip(ftype)
}
break
case 9:if (ftype == Thrift.Type.DOUBLE) {
var rtmp = input.readDouble()
this.row_cache_size = rtmp.value
} else {
  input.skip(ftype)
}
break
case 10:if (ftype == Thrift.Type.BOOL) {
var rtmp = input.readBool()
this.preload_row_cache = rtmp.value
} else {
  input.skip(ftype)
}
break
case 11:if (ftype == Thrift.Type.DOUBLE) {
var rtmp = input.readDouble()
this.key_cache_size = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

CfDef.prototype.write = function(output){ 
output.writeStructBegin('CfDef')
if (null != this.table) {
output.writeFieldBegin('table', Thrift.Type.STRING, 1)
output.writeString(this.table)
output.writeFieldEnd()
}
if (null != this.name) {
output.writeFieldBegin('name', Thrift.Type.STRING, 2)
output.writeString(this.name)
output.writeFieldEnd()
}
if (null != this.column_type) {
output.writeFieldBegin('column_type', Thrift.Type.STRING, 3)
output.writeString(this.column_type)
output.writeFieldEnd()
}
if (null != this.clock_type) {
output.writeFieldBegin('clock_type', Thrift.Type.STRING, 4)
output.writeString(this.clock_type)
output.writeFieldEnd()
}
if (null != this.comparator_type) {
output.writeFieldBegin('comparator_type', Thrift.Type.STRING, 5)
output.writeString(this.comparator_type)
output.writeFieldEnd()
}
if (null != this.subcomparator_type) {
output.writeFieldBegin('subcomparator_type', Thrift.Type.STRING, 6)
output.writeString(this.subcomparator_type)
output.writeFieldEnd()
}
if (null != this.reconciler) {
output.writeFieldBegin('reconciler', Thrift.Type.STRING, 7)
output.writeString(this.reconciler)
output.writeFieldEnd()
}
if (null != this.comment) {
output.writeFieldBegin('comment', Thrift.Type.STRING, 8)
output.writeString(this.comment)
output.writeFieldEnd()
}
if (null != this.row_cache_size) {
output.writeFieldBegin('row_cache_size', Thrift.Type.DOUBLE, 9)
output.writeDouble(this.row_cache_size)
output.writeFieldEnd()
}
if (null != this.preload_row_cache) {
output.writeFieldBegin('preload_row_cache', Thrift.Type.BOOL, 10)
output.writeBool(this.preload_row_cache)
output.writeFieldEnd()
}
if (null != this.key_cache_size) {
output.writeFieldBegin('key_cache_size', Thrift.Type.DOUBLE, 11)
output.writeDouble(this.key_cache_size)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

KsDef = function(args){
this.name = ''
this.strategy_class = ''
this.replication_factor = 0
this.cf_defs = []
if( args != null ){if (null != args.name)
this.name = args.name
if (null != args.strategy_class)
this.strategy_class = args.strategy_class
if (null != args.replication_factor)
this.replication_factor = args.replication_factor
if (null != args.cf_defs)
this.cf_defs = args.cf_defs
}}
KsDef.prototype = {}
KsDef.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.name = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.strategy_class = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.replication_factor = rtmp.value
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.LIST) {
{
var _size44 = 0
var rtmp3
this.cf_defs = []
var _etype47 = 0
rtmp3 = input.readListBegin()
_etype47 = rtmp3.etype
_size44 = rtmp3.size
for (var _i48 = 0; _i48 < _size44; ++_i48)
{
var elem49 = null
elem49 = new CfDef()
elem49.read(input)
this.cf_defs.push(elem49)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

KsDef.prototype.write = function(output){ 
output.writeStructBegin('KsDef')
if (null != this.name) {
output.writeFieldBegin('name', Thrift.Type.STRING, 1)
output.writeString(this.name)
output.writeFieldEnd()
}
if (null != this.strategy_class) {
output.writeFieldBegin('strategy_class', Thrift.Type.STRING, 2)
output.writeString(this.strategy_class)
output.writeFieldEnd()
}
if (null != this.replication_factor) {
output.writeFieldBegin('replication_factor', Thrift.Type.I32, 3)
output.writeI32(this.replication_factor)
output.writeFieldEnd()
}
if (null != this.cf_defs) {
output.writeFieldBegin('cf_defs', Thrift.Type.LIST, 5)
{
output.writeListBegin(Thrift.Type.STRUCT, this.cf_defs.length)
{
for(var iter50 in this.cf_defs)
{
iter50=this.cf_defs[iter50]
iter50.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

